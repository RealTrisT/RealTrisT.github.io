[__TITLE__][<~Dabbling: Return Pointers~>]

[h20][<~Why~>]

Cuz even though I had better stuff to do, I woke up in the morining with this in my anus of a head, so I had to do it.


[h20][<~What~>]

So basically, I woke up this morning, hyped to work on a sick new project I'd just embarked in.
Instead, for some reason, I started thinking about something I'd suggested (inside a bigger suggestion) someone to do in order to solve a problem they had.

And that was verify whether a call was being made from a place you wanted a call made from.
It also had came across my mind a few other times when playing gta 5, cuz I remembered that people were being banned left and right at some point due to hacks calling natives.

Now if you don't know what natives are, they're high level functions on the game's binary, that do shit like "playanimation" and etc. Real high level.
Ofc those are juicy shits, and they were fairly easy to find as well so most cheats relied on them.
But anything that had anything to do with money would get people banned.

Now ofc this was server side, but considering the possibility that it wasn't, the client code checking that the functions were being called from within it's module could be a thing.

So I decided to do both that (the checking), and then a way of defeating it.


[h20][<~Where did you come from~>]

Right so if we're checking where the thing is coming from, we need 2 things, the return pointer, and all of that juicy module information.

The way we get the return pointer is we, in the main function, make a parameter for the return pointer, and then make a naked proxy function that will pass it.

Then there's many ways we can check which module it came from. That disgusting EnumModulesWhatever API, the HelpToolWhatever32 API, which although not really that disgusting, it's still kinda lame to use when you are inside the project. OOOOOOORRRRRRR. We could find out how GetModuleHandle gets it's shit and do it manually.

Now you don't have to worry, I've done it already some time ago, didn't think it was really worth writing a whole post about it, but what you're gonna wanna search for is TEB and PEB. Basically fs (gs in 64 bit) holds a thing that points to the GDT, and the GDT has it pointing to the TEB, which every one of those has a pointer to the PEB, which in turn, again, points to an LDR_DATA structure with module info, including 3 linked lists with the loaded modules by load, memory, and initialization order.

FS or GS are segment registers, you may not have heard of em cuz it's old 16-bit shit nobody really uses besides the CPU, and in turn OS (has to do with [__LINK="https://en.wikipedia.org/wiki/X86_memory_segmentation"][<~memory segmentation~>] in case you wanna go reading).
GDT is the [__LINK="https://en.wikipedia.org/wiki/Global_Descriptor_Table"][<~"Global Descriptor Table"~>], used for segmentation, also mostly a 16-bit thing, but as you can see has it's purpose in 32 and 64 bit x86.
TEB is the [__LINK="https://en.wikipedia.org/wiki/Win32_Thread_Information_Block"][<~"Thread Environment Block"~>] or "Thread Information Block" as for some reason those wiki guys decided to call it, pretty self explanatory, if you don't think so the link is there.
PEB is the [__LINK="https://en.wikipedia.org/wiki/Process_Environment_Block"][<~"Process Environment Block"~>], again, self explanatory, if not, link.

This stuff isn't exactly openly documented as the other apis, though windbg has the structures all filled out if I'm not mistaken, and if it doesn't, you have the internet.

So yeah, here's the code:

[img src="https://imgur.com/kzVTczN.png"]
As you can see, you have printcaller, with the correct parameters, and then _printCaller, with one for the return address, that I decided to call "caller", even though that might be a bit deceiving because it really does point to the instruction after the call.

Here's the result of running that:
[img src="https://imgur.com/9c5rcSJ.png"]

420+69 is in fact 489 (what a memer right?), so everything is a-ok

In case you want to do the module stuff yourself, I should say good luck and fuck you, but Imma provide code anyway so you can understand I'm a big boi with something to prove.
[img src="https://imgur.com/UrHKFLh.png"]

There actually are 3 LIST_ENTRYs in that structure, but it's like layers, if you do load order, it will point to the beginning of the load order LIST_ENTRY on the next/prev struct, if you do memory order it will point to the beginning of the memory order LIST_ENTRY, and same thing for initialization order, that's the reason I cut out the load order one from the struct, cuz I didn't wanna do maths along the way to keep pointers aligned. Fucking stupid shit billy - jesus.


[h20][<~Where did you go~>]

Right so now the whole hacking past that. Ughhh.. I'm fucking bored rn you have no idea. 
Bad habits that ruin your dopamine reward system are the worst habits, cuz then you have way less fun doing everything else.
Don't worry, I'm working on it.

Right so that was a bit messier, but I learned a few new things (or I should say "to do a few new things").

Right so what I did was:
-Find a codecave in the target binary.
-Make a proxy function that saved the return pointer and then changed the one in the stack to point to said codecave in the binary.
-Make a trampoline out of that codecave, that would jump to a second "proxy return", that would jump to the previously saved return address.

But I didn't do it right away, started off with just calling the function straight from the dll:
[img src="https://imgur.com/shC5Lcz.png"]

And of course:

[img src="https://imgur.com/6G1IS1n.png"]

I mean what do you think I am? Not a complete god of the binary?

Shitty personality asside, it wasn't as easy as you might initially think.
I didn't instantly come to the conclusion that what I should do is what's described in the list above.

You kinda need to shove some asm inthere, jump back and forth, and it gets messy.
[img src="https://imgur.com/l70CBvD.png"] <- that's messi
Anyhow what I ended up doing was grab myself a PE, out of that the .text section, finding a codecave, cool.
But then the rest? Boi'o'boi.

So I needed a place to call that would call the function "from it's module", and that would have been easy, just do some inline asm. It actually is what I did initially.
But theeeeeen, you need a place to jump back to, and after that, keep running your own code.

Honestly once I started it kinda all just came to me. The asm source was probably the most difficult thing to do because I'd never done it before in MASM or visual studio, and it was a bit of a pain.
I've explained it, and you might find it complicated, so if you're still confused, I made a lot of dandy comments in the code.

[img src="https://imgur.com/LUmSOXP.png"]

Now today I learned that ``extern "C"`` actually does stuff both ways.
It basically prevents symbol mangling, which would mess shit up for the linker when linking it with the assembly.
That way when the linker finds a missing reference, it can go look in the other obj files for a "calle" instead of a "??!@Â£call!"$/)!"$%/". If it's not clear, I am clearly exaggerating, but I think you get my point.

And I think to fully understand the wizardry (there's a dry in this word, can you imagine if it was pronounced "wizar-dry"? So fucking weird.) you will need the asm.

[img src="https://imgur.com/XYFYBcQ.png"]

Honestly tho can you believe that no motherfucking ide or text editor ever has an ASM hilight? 
Sublime text doesn't and vs doesn't. Makes me mad but makes me also feel like I am doing shit other scrubs aren't. :thinking:

So yeah masm is pretty cancerous compared to nasm. I love my nasm.
Can you imagine someone always having coded in masm, then going over to nasm and thinking it's cancer?
I could see that happening, people code java and then go over to C and say it's cancer so I guess that makes anything possible.

And as eckspekted:
[img src="https://imgur.com/S1p4nuj.png"]
Boom.

You know, I spent quite a while on the whole masm and linking thing, you wouldn't believe how little resources or documentation there is on that.

Anyhow for anyone wanting to attempt this:
[__LINK="https://stackoverflow.com/questions/33751509/external-assembly-file-in-visual-studio"][<~Here~>]'s how to use asm sources.
And [__LINK="https://stackoverflow.com/a/25770921/5352316"][<~here~>]'s a good answer for the ``error LNK2026: module unsafe for SAFESEH image.`` error you're gonna get tryinna compile it (for me adding /safeseh was enough). 


[h20][<~Where did you come from cotton eye Joe~>]

Right so it's all fun and games but if we're being real, how useful can this really be?
Let's just assume that this is a way to bypass some form of anticheat.
First of all you're already using virtualprotect, which is loud as fuck, and you're using it directly on the memory region the binary is mapped to.
On top of that you are changing memory, so provided they don't hook virtualprotect, you still probably would be fucked by integrity checks if there were any.
And I'm just talking usermode ACs.

So I can't see this being the most useful thing on earth right, 
but I can see it being a decent alternative, because provided you're not running multiple threads on your "cheat" or whatever, 
you could change that function pointer, cast it, and call as many functions as you want from the same "spot" in the binary of the target binary. 
Hell, you change codecavejump and you can simulate calls from every single module. Just have an array, "oh now I wanna call from user32.dll".
Besides, if a function properly checks where it's being called from (unlike I did), say with some compiler shenanigans, it's gonna be a bit of code, 
a lot of stack changes, and it would still probably be simpler to do this than to get around that.

Talk about compiler shenanigans, for the executable, it probably is a better idea to use the intrinsics (``_ReturnAddress()`` for vs, there's an equivalent for gcc), since you won't literally have a function that takes a pointer to tell it where it's being called from. 
I didn't know it existed at the time, but still, you could likely just inline the one with all the stuff, and if I had to guess the result shouldn't be too different.


[h20][<~Sleep tight~>]

Cuz I will too.









