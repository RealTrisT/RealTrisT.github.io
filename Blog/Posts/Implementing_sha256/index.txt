
[__TITLE__][<~Implementing: SHA-256~>]


[h20][<~Why~>]
It's a school thing I'm supposed to do in mips assembly (ugh right?), but that I found is a fair bit more confusing than one might initially think (at least for someone like me who'll use [__ITALIAN][<~reading in general~>] as an absolute last resort).
It's also not every day that I implement algorithms, so why not make a post.



[h20][<~The Docs~>]
So after googling for a bit, you will eventually stumble upon [__LINK="https://csrc.nist.gov/csrc/media/publications/fips/180/4/final/documents/fips180-4-draft-aug2014.pdf"][<~this~>] NSA document, explaining the whole sha-2 thing. Ye cuz it's NSA stuff wawo.



[h20][<~Post Structure~>]
So I'm just gonna go on the document, grab the useful stuff and paste the images onhere. The document itself is somewhat lengthy, so it's even easier for me to just read right here as I implement and further write the post, hopefully that works for you too.



[h20][<~Useful Stuff~>]
So the variables are these:
[img src="https://imgur.com/vt0IUnK.png"]

Aaaand a general overview of the algorithm is this (from the sha-2 wikipedia page):
[img src="https://imgur.com/tpTTIWe.png"]

Also here's a nice video I found on the matter, that puts it quite simply (it has some mistakes in it so pay attention to the red text).
[__YOUTUBE src="mbekM2ErHfM?start=130"]



[h20][<~MY FUCKING IMAGE~>]
Right so I made this image that I think explains the whole thing way better than any document or other image I've found.
The psd file is in here.
[img src="https://imgur.com/BFSHsew.png"]



[h20][<~Preprocessing~>]
So it consists of 3 phases (what is effectively 2 for 256, since it uses constants as the H(0)).
[img src="https://imgur.com/AS9ntLV.png"]

Padding:
[img src="https://imgur.com/xTgUbVB.png"]

Parsing:
[img src="https://imgur.com/UyPpLQG.png"]

Setting the initial value:
[img src="https://imgur.com/n2nWztB.png"]



[h20][<~Non-Pre Processing~>]
The functions used by the algorithm are effecively these (in C):
```c
#define CH(x,y,z) (((x) & (y)) ^ (~(x) & (z)))		    //Choose
#define MAJ(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))//Majority
#define SIG0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))	//uppercase sigma
#define SIG1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))	//uppercase sigma
#define sig0(x) (ROTRIGHT(x,7)  ^ ROTRIGHT(x,18) ^ (x>>3) )	//lowercase sigma
#define sig1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ (x>>10))	//lowercase sigma
```
And the constants:
```c
const uint h_Constants[8] = {
	0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
};

const uint h_Ks[64] = {
	0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};
```
Overview:
[img src="https://imgur.com/lHVujXx.png"]

COMpuTatiON:
[img src="https://imgur.com/HTAEKjY.png"]




[h20][<~Implementing - Padding~>]

To put things simply, the whole padded block's size in bits has to be a multiple of 512.

The way it works is:
-After the block, put one 1 bit.
-In the end of said block there will be a 64-bit "word"/"qword"/"whateveryouwannacallit" which should be made to contain the size of the "message".
-All the space in between is zeroed out.

Now I figure I'm just gonna implement this with bytes, since there's really no point in doing it with bits.
Like let's be fair, you're not gonna want a 3-bit message so you can put that one last 1 bit in the end.
Plus what's even the situation where you'd have to hash a number of bits that's not a multiple of 8!?

So. MessageSize + 64 + 1 is gonna have to be our 512-aligned value (that 1 is for an extra 0x80 byte ``1000 0000``, for that 1 bit).

The way I ended up doing it was I created a function to calculate the size of the whole thing when padded, and then another one to do the padding itself.
[img src="https://imgur.com/OcUlT8k.png"]

I find this a good way of doing things. Sometimes when I'm writing shitcode, I'll make functions that'll allocate memory and return a pointer to it, but that's usually bad practice since it's easier to forget that that memory was allocated in the first place, which can cause leaks if a stupid programmer doesn't go through the trouble of thinking.



[h20][<~Implementing - Parsing~>]
[img src="https://imgur.com/TDNqD2J.png"]



[h20][<~Implementing - Schedule~>]

[img src="https://imgur.com/ALMjFyc.png"]

I think the comments do a pretty good job of explaining it.



[h20][<~Implementing - Computing~>]

I figure this part's the simplest, but I had a bit of a hickup with that first assigning of the a, b, c, etc.. variables where I thought it was always the constants.
[img src="https://imgur.com/5F0nFOR.png"]



[h20][<~Implementing - The Main Function~>]

This is the one that does it all. Allocates memory for the padding buffer, does the padding, and then the hash, not really much to say.
[img src="https://imgur.com/dFFY1WH.png"]



[h20][<~Working~>]
Tested with "abc" and "Lorem ipsum dolor sit amet, sem velit vitae pulvinar ut nullam mi, vitae quam, non consectetuer velit. Pellentesque nam urna volutpat risus elit ut. Orci vestibulum sem volutpat eget, blandit ultricies vestibulum, sem ligula, nibh eu lacus. Venenatis viverra id convallis pulvinar tincidunt morbi, vel sit nulla odio libero elementum vel, sed accumsan tincidunt justo et, vivamus est nec est a nunc."(Nothing fancy, it's just [__LINK="https://en.wikipedia.org/wiki/Lorem_ipsum"][<~the lorem ipsum~>].):
[img src="https://imgur.com/wF5oLdr.png"]

You can check it's right on some online website, in trist u no trust.



[h20][<~How about big dicks?~>]

If you're wondering "the fuck?", by big dicks, I mean big chunks of data to hash.

First of all some background.
You can hash stuff for password storage and bitcoin mining, sure. Those are, afaik, the two most prominent usages.

But it's also widely used for stuff like "checksums" (quotes because I might be missusing the word, don't feel like googling rn).

So if you're looking to download say an image of an OS over an insecure connection for example, you might wanna check if you didn't get mitm'd.
Thus, you get the file hash from a secure source, and once the file is downloaded, you hash it on your side, and compare the hash to the original, if it's the same, u safe af (unless someone hacked your hashing software, in which case you're already fucked in every way possible).
[img src="https://imgur.com/eIpMiaP.png"]

Quite a few programs do this in the background. Websockets use sha1 for a really stupid reason but I guess you could consider that as well.

If you're curious about how much goodshit you can hash, the delimiter is that 64-bit word in the end of the padding.
That's representative of the size in bits.

So, ``2^64 = 18446744073709551616``
That divided by 8 (to get bytes) is ``2305843009213693952``.
That in in turn is just ``2097152`` terabytes. 
And if I wanted to be close-minded about it, I'd say that won't be that much of a concern for a while.


So ye, back on topic.

Basically, as my code allocates a buffer for the padded thing, the limit of what you can hash is about like half your ram?

The digest is just 256 bits, so you could open a file, and provided you knew it's length, then proceed to hash it chunk by chunk, and in the last block, allocate the 512 bits and actually add the bit and the size in the end.

But again, I'm doing this for a school project, so chances are slim that I'll make something as fancy as that. Not because it's hard, not because it's been done before, not because I'm perfectly happy with how it is. Just because I honestly have no use for it. If I did, this blog post would have gone differently, and if I ever do, you can expect another one.




[h20][<~Le End~>]
[__LINK="https://gist.github.com/RealTrisT/f09dfb86948c7c9b0726261999d29eba#file-sha256-h"][<~CODE~>]
So in the beginning I didn't find a lot on how sha256 works besides that document and some implementations. Because I don't like reading other people's code, all I really had was a couple of meh-quality videos and the, again, document.

If anyone else's retarded the way I am, I hope this post could help. (I also hope this could help if you're not retarded, it's really not a requirement).

Have a nice day.






