
[h20][<~Bro~>]

So I have to make this shitty processing game for a school project.
Oh my god is processing trash.



[h20][<~But What Game?~>]
It's called "[__LINK="https://www.mathplayground.com/mobile/mousetrap_fullscreen.htm"][<~trap the mouse~>]".
Basically you have a bunch of hexagons, the mouse moves around, you can block hexagons to try and trapem.
Fun to play.



[h20][<~Post Structure~>]

I'm pretty sure this'll just be progress as I go along, so there'll be no real structurexd.



[h20][<~The Drawing Optimization Idea~>]

So I had this cool idea.
Waddif you had a different draw function for every separate part of the game?
So say you had 1 for the initial menu, that does the squres and buttons, then another for playing, and so on.
You could have a pointer to the function you're currently doing, and as you change scenario, you could just change the pointer.
That would eliminate the need to run a condition every frame.

But. This is processing. In java java, you have those trash like IRunnable and etc, that replace function pointers, but here no.

Guess I'll have to save that idea for when I learn directx.


[h20][<~The Drawing Of The Field~>]

So it's 11 width per "11" height. 
I say ""11"" because that's not really how hexagons work:
[img src="https://imgur.com/XQhJmS6.png"]

How I think I'm gonna draw each one is with the help of [__LINK="https://processing.org/examples/regularpolygon.html"][<~this~>] page.



[h20][<~Optimizing The Drawing~>]

Now if you've taken the time to read that, you'll have noticed there's a lot of calculations needed for that stuff.
So I think I might, since they're all the same size, just make a hexagon function with hardcoded distance values.

Actually no.

I'll make 2 functions (hexagon only):

1.
One takes a distance and an array.
It then proceeds to fill said array with the offsets from the center, based on that formula.

2.
The other one takes a point and the array, then it'll just do the vertex stuff with those values.


What I'm probably gonna do as well is just not draw more than I need to.
So instead of drawing every frame, draw once, and then redraw only where needed.



[h20][<~Structure Of The Field~>]

Right, so this one is a bit of a struggle.
I'll need to do pathfinding for the mouse, so just making a 2D array with the hexagons and offsetting them will probably not be enough.

A decent idea though is making an actual matrix, and only drawing where necessary.
So then it'd kinda work like this:
[img src="https://i.imgur.com/8J5OX6h.png?1"]

But that's where memory problems come in.
That'd essentially make for double the points.

The initial would have been 11x11, now we've got 22x11, that's 242.
Provided a float is 4 bytes, that'd be 242*8 = 1936 bytes.
That's about 2kb, I don't think it's that bad after all, we'll see.



[h20][<~Trouble In Hexagon Town~>]

So I didn't think of this before.
[img src="https://imgur.com/IDKhSdX.png"]

You're gonna have to excuse me tho, not really the hexagon boi who does hexagonez all days.

But ye, that's easy to solve, just make another function to find the short diagonal.

If you get trig this high quality paint sketch should be p easy to understand:
[img src="https://imgur.com/lLSwHIB.png"]

So just ``cos(30)*diameter``.

Same thing for the edge: ``sin(30)*diameter``.

And just like that, we got our first shit:
[img src="https://imgur.com/DbNvlnW.png"]

Now there's only one problem: Orientation.
We want vertices pointing up, not to the side, but that's just adding 30ยบ to the operations:
[img src="https://imgur.com/bUjbzZt.png"]

And done:
[img src="https://imgur.com/vNrdx31.png"]
It even looks like a dick, how tasty.

By the way to clarify, I'm not actually sure processing java is gonna optimize those operations into constants, but that's not the reason why I use constants, I use them because if I'm not doing loops, I might as well.
Tbh there's no real reason, it's just how I did it in the beginning and there's really no reason to change it now. I commented what it is, and there should be no reason to change it so I'm not gonna prettify it.
I just said reason like 5 times and I'm ok with that.

sorry



[h20][<~Drawing Alloem'~>]

Looperoni Pepperoni.

Decided to do 2, one for the even rows and one for the odd rows.
The rest was 2+2=4 quick maths.
[img src="https://imgur.com/rCvMyDP.png"]



[h20][<~Where Did I Click?~>]

Right so now the part where, given a coordinate, you have to figure out which hex was clicked.
[__COLOR="red"][<~Fuck~>].

Right so there's a lot of ways to go about this.

So I was thinking something like turning it into a bunch of squares and going from there.
That wouldn't account for borders.

I also throught of the sphere equation, that could help.
That also wouldn't account for borders

Another idea that came to my mind was to do something 3D.
I mean this [img src="https://imgur.com/BqYwsN9.png"] looks like a cube, so it could potentially be a good idea, or it could just add 1 dimension to the same problem.


But now I'm thinking functions.

Let's start vertical since that's the hardest part.

So we could mix the first idea:
[img src="https://imgur.com/W357kvb.png"]

With a function to figure out if the coordinate was in a hexagon above the line or in the one bellow.

So first of all we want a function that goes like this
[img src="https://i.imgur.com/zWfJ8o0.png?1"][h1][<~I'm so sorry lmao~>]

Where the slope of those straights(?) is ``(180 - 120)/2 = 30ยบ``.

Tangent of 30 is cubic root of 3 over 3.

So our equation is going to be:
``u(x) = x*(sqrt(3)/3);`` for when it's going up, and
``d(x) = x*(-sqrt(3)/3) + hexT;`` where hexT is the height that a triangle of the hex makes:

[img src="https://imgur.com/3XwD4PU.png"][h2][<~I later put it in a class and changed it's name to TrianH (for triangle height)~>]

But there's a problem.
Coordinates are retarded here, so y grows as you go down.
That means we've gotta flip the equation.
So it becomes:

``u(x) = x*(sqrt(3)/3)-hexT;``
and
``d(x) = x*(-sqrt(3)/3);``
(I'm not actually at all sure about this, and I'm having a hard time picturing it)

So then it'll be the whole ``/\/\/\/\/\`` thing.
And with this result, we can check if the coordinate we selected is in the above hexagon or not.

So like ``if (y < f(x))result_y--;``.

Needless to say that didn't go smooth. The theory is sorta hard to picture, so I went with the formulas, and then "calibrated" to get the desired results. Principle is still the same though.
[img src="https://imgur.com/57DgX7d.png"]
``solov`` is just mouseY%hexagon_width.
``thatconst`` is the root of 3 over 3


The horizontal was easy, just checking line, and dividing by the width of the hexagon.
[img src="https://imgur.com/dWJGD5H.png"]
(the motherfucking int cast doesn't truncate shit in this language - can you believe that?)



[h20][<~Field~>]

So I've decided to go with the idea of before, and make an array with double the points to be able to "simulate" a grid.
*makes field class where the constructor allocates all those juicy points*

Since now we've got a coordinate from a position. (I'm calling the field's xy "index" coordinate and the actual "pixel" position position)

We should probably get a position from a coordinate as well. Since I have a class for the field that was easy:
[img src="https://imgur.com/0IPbZQE.png"]

And result:
[img src="https://imgur.com/TS0hXP3.gif"]



[h20][<~Movement~>]

Given the game there's really no need for me to be doing this, and it's code that'll more than likely get erased.

But it's gotta be a fun experience to do 2d movement on hexagons. 
I mean you can't just WASD, you can A&D, but W and S are complicated since there's 2 possible ways to go.

So what I'm gonna do is, if you're holding W|S down and click A or D, it'll go to the corresponding one.

Like this:
[img src="https://imgur.com/pHl0WEz.png"]


So what I decided to do was create a class, that will have 2 main functions:
One to change the state of the keys (the ones needed to do the movement).
And one to actually move, that'll check the state of the keys and do stuff accordingly.

That comes in handy for when you want to predict movement, because you can just clone the coordinate class instance and plug it into the second function, out will come the predicted movement.
This way in the future you'll be able to tell if the hexagon the player's trying to move to is blocked.

[img src="https://imgur.com/pUAHg1y.png"]



[h20][<~Blocking Hexagons~>]

For now let's just color them differently.

Right so this has to have to do with the field class.

Quick note I'd just like to point out how hilarious it is that java does non-dynamic arrays without usage of pointers or ways to properly allocate/release memory.
It's like they're trying to be the apple of programming languages, stripping shit away from the user because they think they know better, when they just really don't.

Right so this is gonna be complicated.

I don't think that there's a perfect way of doing this.

If I draw the colored on top of the pre-existing map, I'll be wasting rendering time on stuff that's not gonna show.

If I don't I'll be loosing time checking each hexagon for it's state while I draw.

I think it's a matter of usage. 
If it's like 2x2, the second should be more optimized, since 4 conditions are better than potentially rendering 4 hexagons (if they all have a different color).
If it's like 100x100, I'll potentially be doing 10K checks and drawing once, so the second alternative is better.


But there is also something else I can do.
I can only render when needed.
So render the whole map once. And then only render a couple of hexagons on top for their color.
The issue is in the future I'll have to be careful as to what to re-render.
Because say I render a player on top of hexagon (6, 9), and then when the player moves, rerender at hexagon (6,10).
Then 2 players will show at both those hexagons if I don't rerender (6, 9).
Here's how it looks:
[img src="https://imgur.com/39hGRPE.gif"]

This would allow for something like potentially event-only based rendering, not using a rendering loop at all.

I'm going with this one tho. Performance ftw.


So now there's the problem of storing the marked hexagons.
I figure it's not worth making something dynamic for 2 reasons:
1. The first time I trapped the rat, I activated all the hexagons before winning the game (something I don't intend on letting the user do ;)
2. It's too cancer in java and it's not that much memory.

So ye, just normal array of [__COLOR="orange"][<~booleans~>].

And when that's implemented, we can do shit like this:
[img src="https://imgur.com/w4wZ8M6.png"]
(if you look real close, you'll notice the draw function is empty)


Which in turn works like this:
[img src="https://imgur.com/9vw2oaZ.gif"]


[h6][<~Takeaway From Event-Based Rendering~>]

Right, so there's always a balance to things.

To loop rendering, the disadvantage is you call it every frame, and if you have a lot of elements that you have to check if you're gonna print, that should bring framerates way down, so basically loop based rendering has to have light stuff.

To event based rendering there's 2 problems.
1. If your event does too many checks, it can harm responsiveness (though that can be fixed with multithreading).
2. You have to be really careful about what you're drawing and when, which requires quite a bit more checks than loop-based.

Basically if you look at the code, you'll see that I have a few checks just to know if I can override a certain square when I hover it.
That can become a problem in the future, if I have a lot of stuff to render.
Because it's an independent event that can be called at any time, we're gonna have to check if there's something there that we can't override.

So down the line I might do sort of a hybrid where some stuff goes into the rendering loop, and some other stuff is event-based, so that I don't have to put so many conditions in the events.

That sounds a bit dirty so we'll see.



[h20][<~Movement Prediction~>]

Back to movement. Remember this really makes no sense since it's probably not gonna be in the final game.


So yeah just gotta do the predict function I already implemented.
And boom:
[img src="https://imgur.com/fz5S7ig.png"]

Purple is the player object controlled by the keyboard.
Basically I can't move through the red squares, which are the ones in the bool array.

The problem with event-based rendering is starting to show more here because now I can't hover over the player too (that'll eventually be the mouse).
Though I what I can do is - instead of b00l34n5, I could just do a char, and then use bit flags for blocked, hovered and player.
Then make a higher level drawSingle function in the field class, that would read those from the array, and set the hexagon color according to priority.
Then I'd call it every time there was a modification to a hexagon.

Spoiler alert I did do that and it works quite nicely.



[h20][<~Movement Prediction~>]




